# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DataRate.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from decimal import Decimal
import datetime
import os
import subprocess

class Ui_DataRating(object):
    def setupUi(self, DataRating):
        DataRating.setObjectName("DataRating")
        DataRating.resize(272, 210)
        DataRating.setFixedSize(272, 225)

        self.TotalFrame = QtWidgets.QFrame(DataRating)
        self.TotalFrame.setGeometry(QtCore.QRect(10, 75, 201, 61))

        self.TotalFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.TotalFrame.setObjectName("TotalFrame")
        self.label_17 = QtWidgets.QLabel(self.TotalFrame)
        self.label_17.setGeometry(QtCore.QRect(90, 30, 55, 16))
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.result = QtWidgets.QLabel(self.TotalFrame)
        self.result.setGeometry(QtCore.QRect(120, 0, 91, 61))
        self.result.setText("")
        self.result.setObjectName("result")
        self.Btotal = QtWidgets.QPushButton(self.TotalFrame)
        self.Btotal.setGeometry(QtCore.QRect(1, 3, 81, 51))
        self.Btotal.setObjectName("Btotal")
        self.label_34 = QtWidgets.QLabel(self.TotalFrame)
        self.label_34.setGeometry(QtCore.QRect(95, 5, 16, 51))
        self.label_34.setObjectName("label_34")
        self.SaveButton = QtWidgets.QPushButton(DataRating)
        self.SaveButton.setGeometry(QtCore.QRect(10, 155, 81, 35))
        self.SaveButton.setObjectName("SaveButton")
        self.pushButton = QtWidgets.QPushButton(DataRating)
        self.pushButton.setGeometry(QtCore.QRect(180, 155, 81, 35))
        self.pushButton.setObjectName("pushButton")
        self.FreeValue = QtWidgets.QTextEdit(DataRating)
        self.FreeValue.setGeometry(QtCore.QRect(10, 25, 104, 31))
        self.FreeValue.setObjectName("FreeValue")
        self.pushButton_2 = QtWidgets.QPushButton(DataRating)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 25, 131, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.timer_label = QtWidgets.QLabel(DataRating)
        self.timer_label.setGeometry(QtCore.QRect(110, 160, 104, 31))
        self.timer_label.setObjectName("timer_label")
        self.label_18 = QtWidgets.QLabel(DataRating)
        self.label_18.setGeometry(QtCore.QRect(190, 200, 71, 20))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(DataRating)


        self.retranslateUi(DataRating)
        QtCore.QMetaObject.connectSlotsByName(DataRating)

        self.total = Decimal(0)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_timer)
        self.timer_label.setText("00:00:00")  # Texte initial du timer
        self.timer.start(1000)  # Mettre à jour le timer toutes les secondes

    def add_value(self, value):
        if value != "Total":
            self.total += Decimal(value)
            self.result.setText(str(self.total))
            print("Total:", self.total)
            self.timer_label.setText("00:00:00")  # Redémarrer le timer à zéro

    def add_free_value(self):
        value = self.FreeValue.toPlainText()
        if value:
            self.add_value(value)

    def update_timer(self):
        time = self.timer_label.text()
        h, m, s = map(int, time.split(":"))
        elapsed_time = datetime.timedelta(hours=h, minutes=m, seconds=s) + datetime.timedelta(seconds=1)
        self.timer_label.setText(str(elapsed_time))

    def reset_total(self):
        self.total = Decimal(0)
        self.result.setText(str(self.total))

    def save_total(self):
        total_minutes = int(self.total)
        total_hours = total_minutes // 60
        remaining_minutes = total_minutes % 60
        current_time = datetime.datetime.now()
        timestamp = current_time.strftime("%Y-%m-%d %H:%M:%S")

        formatted_total = "Total: {} minutes ({} hours {} minutes)".format(total_minutes, total_hours,
                                                                           remaining_minutes)
        log_entry = "{} - {}\n".format(timestamp, formatted_total)

        desktop_path = os.path.expanduser("C:/Users/Nox/Desktop")
        log_folder = "Data Rating"
        folder_path = os.path.join(desktop_path, log_folder)
        filename = f"DataRate log.txt"
        file_path = os.path.join(folder_path, filename)

        with open(file_path, "a") as file:
            file.write(log_entry)

        subprocess.Popen(["pythonw", "nom_de_votre_script.py"], creationflags=subprocess.DETACHED_PROCESS,
                         close_fds=True)

    def convert_to_hours(self):
        if isinstance(self.total, Decimal):
            hours = int(self.total // 60)
            minutes = int(self.total % 60)
            self.result.setText("{:02d}:{:02d}".format(hours, minutes))

    def retranslateUi(self, DataRating):
        self.Btotal.clicked.connect(self.convert_to_hours)
        _translate = QtCore.QCoreApplication.translate
        DataRating.setWindowTitle(_translate("DataRating", "DataRater - Nox - 2023"))

        self.Btotal.setText(_translate("DataRating", "Total"))
        self.label_34.setText(_translate("DataRating", "="))
        self.SaveButton.setText(_translate("DataRating", "Save"))  # Save button
        self.pushButton.setText(_translate("DataRating", "Clean"))  # Clean button
        self.pushButton_2.setText(_translate("DataRating", "Add Value"))  # Add value button
        self.timer_label.setText(_translate("DataRating", "00:00:00"))  # Initial text of the timer
        self.label_18.setText(_translate("DataRating", "Nox - 2023"))
        self.pushButton_2.clicked.connect(self.add_free_value)
        self.pushButton.clicked.connect(self.reset_total)
        self.SaveButton.clicked.connect(self.save_total)
        buttons = [attr for attr in dir(self) if attr.startswith("B")]
        for button_name in buttons:
            button = getattr(self, button_name)
            if isinstance(button, QtWidgets.QPushButton):
                button.clicked.connect(lambda checked, value=button.text().replace("B", ""): self.add_value(value))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DataRating = QtWidgets.QDialog()
    ui = Ui_DataRating()
    ui.setupUi(DataRating)
    DataRating.show()
    sys.exit(app.exec_())